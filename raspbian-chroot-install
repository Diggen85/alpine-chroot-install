#!/bin/bash
# vim: set ts=2:
#---help---
# Usage: raspbian-chroot-install [options]
# 
# This script installs raspbian Linux into a chroot and sets up
# qemu-user and binfmt to emulate different the architecture (armhf / armv7).
# It's a fork of alpine-chroot-install
#
# If qemu-user and binfmt is needed, the script checks if both are available
# and qemu-user has version >= 2.6. If not, it tries to install them using
# apt-get. Beside this the script should work on any Linux system.
#
# It also creates script "raspbian-chroot" inside the chroot directory, that may
# be used to enter the chroot environment. That script do the following:
#
#   1. saves environment variables specified by $CHROOT_KEEP_VARS and PWD,
#   2. chroots into $CHROOT_DIR,
#   3. starts clean environment using "env -i",
#   4. switches user and simulates full login using "su -l",
#   5. loads saved environment variables and changes directory to saved PWD,
#   6. executes specified command or "sh" if not provided.
#
# Example:
#   sudo rasobpan-chroot-install 
#	  /raspbian/raspbian-chroo enter -u pi /bin/bash
#
# Options and environment variables:
#   -a ARCH                CPU architecture for the chroot. If not set, then it's
#                          armhf and will be emulated by qemu
#													 Options: armhf, armv7
#                          (x86_64 - maybe later with other raspbian.img)
#
#   -b RASPBIAN_URL        https://downloads.raspberrypi.org/...
#										 			 Default:
#													 https://downloads.raspberrypi.org/raspbian_lite_latest
#													 Must be a Zip-Archive
#                          
#   -d CHROOT_DIR          Absolute path to the directory where Alpine chroot
#                          should be installed (default is /alpine).
#
#   -k CHROOT_KEEP_VARS... Names of the environment variables to pass from the
#                          host environment into chroot by the enter-chroot
#                          script. Name may be an extended regular expression.
#                          Default: ARCH CI QEMU_EMULATOR TRAVIS_.*.
#
#   -p RASPBIAN_PACKAGES...Raspbian packages to install into the chroot (default is
#                          build-essential git ).
#
#   -s IMAGE_SIZEADD       Add MegaBytes to downloaded Image (default isc4096)
#
#   -t TEMP_DIR            Absolute path to the directory where to store temporary
#                          files (defaults to `mktemp -d`).
#
#   -h                     Show this help message and exit.
#
#   -v                     Print version and exit.
# Each option can be also provided by environment variable. If both option and
# variable is specified and the option accepts only one argument, then the
# option takes precedence.
#
# https://github.com/Diggen85
#---help---
set -e # halt on error
shopt -s expand_aliases #expand alias

#=======================  C o n s t a n t s  =======================#
#Script requirements
RCH_REQUIREMENTS="parted"

# Minimal required version of QEMU emulator.
QEMU_MIN_VER='2.6'

# Version of raspbian-chroot-install script.
# Forked from alpine-chroot-install-0.12.0
VERSION='0.1.0'


#=======================  F u n c t i o n s  =======================#

die() {
	printf '\033[1;31mERROR:\033[0m %s\n' "$@" >&2  # bold red
	exit 1
}

einfo() {
	printf '\n\033[1;36m> %s\033[0m\n' "$@" >&2  # bold cyan
}

ewarn() {
	printf '\033[1;33m> %s\033[0m\n' "$@" >&2  # bold yellow
}

normalize_arch() {
	case "$1" in
		x86 | i[3456]86) echo 'i386';;
		armhf | armv[4-9]) echo 'arm';;
		*) echo "$1";;
	esac
}

fetch_url() {
	local url="$1"
  local dest="$2"

	if command -v curl >/dev/null; then
		curl --connect-timeout 10 -#L -o "$dest" "$url"
	elif command -v wget >/dev/null; then
		wget -T 10 -O "$dest" "$url"
	else
		die 'Cannot download a file: neither curl nor wget is available!'
	fi
}

expand_image() {
	local img=$1
	local add=$2

	if [ -f $img ]; then
		einfo "Padding $img with $add MB"
  	dd if=/dev/zero bs=1M count=$add >> $img
	fi
}

make_chroot_image() (
	local url="$1"
	local actpwd=$(pwd)
  local tmpzip=$(mktemp)

	einfo  "Download $url to $tmpzip"
	fetch_url "$url" "$tmpzip"
	local imgname=$(unzip -l "$tmpzip" | grep ".img" | cut -d" " -f3)
	einfo "Extract $tmpzip to $CHROOT_DIR"
	unzip -d "$CHROOT_DIR" "$tmpzip"	
	einfo "Raspbian chroot image is ${CHROOT_DIR}/${imgname}"
	rm -f "$tmpzip"
)

usage() {
	sed -En '/^#---help---/,/^#---help---/p' "$0" | sed -E 's/^# ?//; 1d;$d;'
}


gen_chroot_script() {
	#build vars, exports for the script
	local exps=""
	exps="${exps}\nexport RASPBIAN_IMAGE=$RASPBIAN_IMAGE"
	exps="${exps}\nexport CHROOT_DIR=$CHROOT_DIR"
	exps="${exps}\nexport ENV_FILTER_REGEX='($(echo "$CHROOT_KEEP_VARS" | tr -s ' ' '|'))'"

cat <<-EOF
		#!/bin/sh
		set -e
		#DEBUG
		#set -x		
		export MOUNTED_LOOPDEV="" #DYNREPLACE
EOF
 echo -e $exps
cat <<-'EOF'
		[ "$(id -u)" -eq 0 ] || _sudo='sudo'
    
	setup_loopdev() {
		echo "Setup loopdev for ${RASPBIAN_IMAGE}"
		export CHROOT_LOOPDEV=$($_sudo losetup -fP --show ${RASPBIAN_IMAGE})
		echo "loopdev is ${CHROOT_LOOPDEV}"
		$_sudo sed -i "s|^export MOUNTED_LOOPDEV=.*#DYNREPLACE$|MOUNTED_LOOPDEV= #DYNREPLACE|" $0
	}

	case $1 in
		addsize)
			if [ "$#" = "2" ] &&  [ -f ${RASPBIAN_IMAGE} ]; then
				echo "Extending ${RASPBIAN_IMAGE} with $2 MB"
				$_sudo dd if=/dev/zero of=${RASPBIAN_IMAGE} conv=notrunc oflag=append bs=1M count=$2
				setup_loopdev
				$_sudo parted -s ${CHROOT_LOOPDEV} "resizepart 2 100%" quit
				$_sudo parted -s ${CHROOT_LOOPDEV} print quit | sed -n "7,+2 p"
				resize2fs ${CHROOT_LOOPDEV}p2
				e2fsck -y -f ${CHROOT_LOOPDEV}p2
				losetup -d ${CHROOT_LOOPDEV}
			fi
		;;

		mount)
			setup_loopdev

			# mount partition
			$_sudo mkdir -p ${CHROOT_DIR}/mnt
			$_sudo mount -o rw ${CHROOT_LOOPDEV}p2 ${CHROOT_DIR}/mnt
			$_sudo mkdir -p ${CHROOT_DIR}/mnt/boot
			$_sudo mount -o rw ${CHROOT_LOOPDEV}p1 ${CHROOT_DIR}/mnt/boot

			# mount binds
			$_sudo mount -v -t proc none ${CHROOT_DIR}/mnt/proc
			$_sudo mount -v --rbind /sys ${CHROOT_DIR}/mnt/sys
			$_sudo mount --make-rprivate ${CHROOT_DIR}/mnt/sys
			$_sudo mount -v --rbind /dev ${CHROOT_DIR}/mnt/dev
			$_sudo mount --make-rprivate ${CHROOT_DIR}/mnt/dev

			# Some systems (Ubuntu?) symlinks /dev/shm to /run/shm.
			if [ -L /dev/shm ] && [ -d /run/shm ]; then
				$_sudo mkdir -p ${CHROOT_DIR}/mnt/run/shm
				$_sudo mount -v --bind /run/shm ${CHROOT_DIR}/mnt/run/shm
				$_sudo mount --make-private ${CHROOT_DIR}/mnt/run/shm
			fi
			
			#TODO bind workingdir

			$_sudo cp /etc/resolv.conf ${CHROOT_DIR}/mnt/etc/resolv.conf
			;;

		umount) 
			if [ ! -f "{$MOUNTED_LOOPDEV}"] ; then
				echo "Have no mounted loopdev. Trying to unmount all"
				losetup -D 
				exit $?
			fi
			$_sudo umount --detach-loop --all-targets --recursive --force --verbose ${CHROOT_DIR}/mnt

			$_sudo losetup -d ${MOUNTED_LOOPDEV}
			$_sudo sed -i "s|^export MOUNTED_LOOPDEV=.*#DYNREPLACE$|MOUNTED_LOOPDEV= #DYNREPLACE|" $0
			;;
		enter)
		  shift 1
			user='root'
			if [ $# -ge 2 ] && [ "$1" = '-u' ]; then
					user="$2"; shift 2
			fi
			oldpwd="$(pwd)"
			[ "$(id -u)" -eq 0 ] || _sudo='sudo'

			tmpfile="$(mktemp)"
			chmod 644 "$tmpfile"
			export | sed -En "s/^([^=]+ ${ENV_FILTER_REGEX}=)('.*'|\".*\")$/\1\3/p" > "$tmpfile" || true

			cd "${CHROOT_DIR}"

			#TODO check if mounted
			$_sudo mv "$tmpfile"  ${CHROOT_DIR}/mnt/env.sh
			$_sudo chroot ${CHROOT_DIR}/mnt /usr/bin/env -i su -l "$user" \
					/bin/bash -c ". /etc/profile; . /env.sh; cd '$oldpwd' 2>/dev/null; \"\$@\"" \
					-- "${@:-/bin/bash}"
			;;
		*)
			echo "$0  [ mount | umount | enter ]"
			;;
	esac
EOF
}
# umount --detach-loop --all-targets --recursive --force --verbose --fake
#------------------------- Debian/Ubuntu ---------------------------#

alias cmp_versions='dpkg --compare-versions'
alias apt_install='apt-get install -y --no-install-recommends'

# Prints version of the specified APT package that would be installed.
# $1: package name
apt_pkgver() {
	LC_ALL=C apt-cache policy "$1" | sed -En 's/^\s*Candidate:( [0-9]+:| )(\S+).*/\2/p'
}

# Prints version of the given QEMU binary.
# $1: qemu binary
qemu_version() {
	"$1" --version | sed -En 's/^.*version ([0-9.]+).*/\1/p'
}

# Installs and enables binfmt-support on Debian/Ubuntu host.
install_binfmt_support() {
	apt_install binfmt-support \
		|| die 'Failed to install binfmt-support using apt-get!'

	update-binfmts --enable \
		|| die 'Failed to enable binfmt!'
}

# Installs QEMU user mode emulation binaries on Debian/Ubuntu host.
install_qemu_user() {
	local qemu_ver=$(apt_pkgver qemu-user-static)

	cmp_versions "$qemu_ver" ge "$QEMU_MIN_VER" \
		|| die "Package qemu-user-static available for your system is too old ($qemu_ver < $QEMU_MIN_VER)!"

	apt_install qemu-user-static \
		|| die 'Failed to install qemu-user-static using apt-get!'
}

install_requirements() {
	einfo "Installing script requirements: $RCH_REQUIREMENTS"
	apt_install $RCH_REQUIREMENTS \
		|| die "Failes installing requirements!"
}

#============================  M a i n  ============================#

while getopts 'a:b:d:i:k:m:p:r:t:hv' OPTION; do
	case "$OPTION" in
		a) ARCH="$OPTARG";;
		b) RASPBIAN_URL="$OPTARG";;
		d) CHROOT_DIR="$OPTARG";;
		k) CHROOT_KEEP_VARS="${CHROOT_KEEP_VARS:-} $OPTARG";;
		p) RASPBIAN_PACKAGES="${RASPBIAN_PACKAGES:-} $OPTARG";;
		s) IMAGE_SIZEADD="$OPTARG";;
		t) TEMP_DIR="$OPTARG";;
		h) usage; exit 0;;
		v) echo "raspbian-chroot-install $VERSION"; exit 0;;
	esac
done

: ${RASPBIAN_URL:="http://downloads.raspberrypi.org/raspbian_lite_latest"}
: ${RASPBIAN_PACKAGES:="build-essential git"}
: ${IMAGE_SIZEADD:=4096}
: ${ARCH:="armhf"}
: ${CHROOT_DIR:="/raspbian"}
: ${CHROOT_KEEP_VARS:="ARCH CI QEMU_EMULATOR TRAVIS_.*"}
: ${TEMP_DIR:=$(mktemp -d || echo /tmp/raspbian)}


if [ "$(id -u)" -ne 0 ]; then
	die 'This script must be run as root!'
fi

install_requirements

einfo "Create Working Dir - $CHROOT_DIR"
mkdir -p ${CHROOT_DIR}
cd ${CHROOT_DIR}



if [ ! -f ${CHROOT_DIR}/*raspbian*img ]; then
	einfo "Downloading the Image"
	make_chroot_image "${RASPBIAN_URL}"	
fi 				

export RASPBIAN_IMAGE=$(ls ${CHROOT_DIR}/*raspbian*.img)
einfo "Raspbian Image is $RASPBIAN_IMAGE"

einfo "Creating ${CHROOT_DIR}/raspbian-chroot"
gen_chroot_script > ${CHROOT_DIR}/raspbian-chroot
chmod 755 ${CHROOT_DIR}/raspbian-chroot

${CHROOT_DIR}/raspbian-chroot addsize $IMAGE_SIZEADD
${CHROOT_DIR}/raspbian-chroot mount 

# Install QEMU user mode emulation if needed (works only on Debian and derivates)
QEMU_EMULATOR=''
if [ -n "$ARCH" ] && [ $(normalize_arch $ARCH) != $(normalize_arch $(uname -m)) ]; then
	qemu_arch="$(normalize_arch $ARCH)"
	QEMU_EMULATOR="/usr/bin/qemu-$qemu_arch-static"

	if [ ! -x "$QEMU_EMULATOR" ]; then
		einfo 'Installing qemu-user-static on host system...'
		install_qemu_user

	#elif ! cmp_versions "$(qemu_version $QEMU_EMULATOR)" ge $QEMU_MIN_VER; then
	elif ! cmp_versions "$(qemu_version $QEMU_EMULATOR)" ge $QEMU_MIN_VER; then
		ver=$(qemu_version $QEMU_EMULATOR)
		die "${QEMU_EMULATOR##*/} on host system is too old ($ver), minimal required version is $QEMU_MIN_VER"
	fi

	if [ ! -e /proc/sys/fs/binfmt_misc/qemu-$qemu_arch ]; then
		einfo 'Installing and enabling binfmt-support on host system...'
		install_binfmt_support
	fi

	mkdir -p ${CHROOT_DIR}/mnt/usr/bin
	cp -v "$QEMU_EMULATOR" ${CHROOT_DIR}/mnt/usr/bin/

  #and delete ld.so.preload
	$_sudo rm -f ${CHROOT_DIR}/mnt/etc/ld.so.preload
fi



einfo 'Setting up Raspian'
${CHROOT_DIR}/raspbian-chroot enter <<-EOF
	set -e
	apt-get update
	apt-get -y --no-install-recommends install $RASPBIAN_PACKAGES
EOF

cat >&2 <<-EOF
	---
	Raspbian installation is complete and mount.
	 - Run $CHROOT_DIR/raspbian-chroot enter [-u pi|<user>] [command] to enter the chroot.

	 - Run $CHROOT_DIR/raspbian-chroot umount to clean and umount the chroot
	 - Run $CHROOT_DIR/raspbian-chroot mount to setup the chroot again
EOF

